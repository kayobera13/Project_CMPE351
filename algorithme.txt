start

while (f:o){
	read -f parameter
		File fileinput= parameter;
	read -o parameter
		File fileouput=parameter;
}

while(1){
	message to the user asking to choose Action to do; //show message
	getting user choice;	//get response
	
	case response:{
	
		response==1.{
				//scheduling Method 
				
				message to the user asking to choose scheduling method; //show message
				getting user choice;	//get response_schedule_type
				
				case response_schedule_type:{
				
					response_schedule_type="None"
						Action relative to scheduling method None;
						
					response_schedule_type="First Come, First Served Scheduling"
						Action relative to scheduling method First Come, First Served Scheduling;
						
					response_schedule_type="Shortest-Job-First Scheduling"
						Action relative to Shortest-Job-First Scheduling;
						
					response_schedule_type="Priority Scheduling"
						Action relative to Priority Scheduling;
									 
							tester=true;
							time=0;
							while(tester){
								processesToExecute=priority();
								if(processesToExecute==-1){
									tester=false;
								}
								else{
									counter=0;
									
									foreach(processes as process){
										if(process[5]==0 and process[1]>=time){
											process[5]>=1;
										}else if(process[5]==1 and process[4]==0){
											if(counter==processesToExecute){
												process[0]=process[0]-1;
												if(process[0]==0){
													process[4]==1;
												}
											}else{
												process[3]=process[3]+1;
											}
										}
										counter++;
									}
								}
								time++;
							}
						
					response_schedule_type="Round-Robin Scheduling"
						Action relative to Round-Robin Scheduling
					
				}
		}
			//scheduling Method (None)
				
			
		response==2 {
			Preemptive Mode(Off)
			time_start=0  //get current time
				operation start
				...
				operation end
			time_end //get current time
			time=time_start -time_end
		}
			
		response==3{
			Show Result
			
			a) average waiting time for all jobs
			b) for each job waiting time
		
		}
			
			
		response==4
			End Program (break)
			
		other
			ask again;
	}

}


function priority(){
	processSelected=-1;
	lowestPriority=0;
	counter=0;
	boolProcessSelected=false;
	foreach(processes as pp){
		if((boolProcessSelected=false && pp[5]==1) || (boolProcessSelected=true and pp[5]==1 and pp[4]==0 and pp[2]<lowestPriority))
		{
				lowestPriority=pp[2];
				processSelected=counter;
				boolProcessSelected=true;
		}
		counter++;
	}
	return processSelected;
}














































FIFO

tab exec_time= 		5  4  3  4  3		3 3 4 4 5
tab time_arrive =	0  1  1  2  3		1 3 1 2 0
tab priority=		3  2  1  2  1		1 1 2 2 3

tab Processes 		p1 p2 p3 p4 p5
tab waiting time    0  0  0	 0  0


waiting_time 0 not executing && 1 Executing   3
finish_status 0 not over && 1 over				   4 
in_queue 0 not in queue 1 in queue					5

//Priority
processes={
	
	p1 ={5, 0, 3, 0, 0, 0} 
	 p2 ={4, 1, 2, 0, 0, 0}
	p3 ={3, 1, 1, 0, 0, 0} 
	p4 ={4, 2, 2, 0, 0, 0} 
	p3 ={3, 3, 1, 0, 0, 0} 
}
		 0  1  2   3  4  5
		 
		 
tester=true;
time=0;
while(tester){
	processesToExecute=priority();
	if(processesToExecute==-1){
		tester=false;
	}
	else{
		counter=0;
		foreach(processese as process){
			if(process[5]==0 and process[1]>=time){
				process[5]>=1;
			}else if(process[5]==1 and process[4]==0){
				if(counter==processesToExecute){
					process[0]=process[0]-1;
					if(process[0]==0){
						process[4]==1;
					}
				}else{
					process[3]=process[3]+1;
				}
			}
			counter++;
		}
	}
	time++;
}

function priority(){
	processSelected=-1;
	lowestPriority=0;
	counter=0;
	boolProcessSelected=false;
	foreach(processes as pp){
		if((boolProcessSelected=false && pp[5]==1) || (boolProcessSelected=true and pp[5]==1 and pp[4]==0 and pp[2]<lowestPriority))
		{
				lowestPriority=pp[2];
				processSelected=counter;
				boolProcessSelected=true;
		}
		counter++;
	}
	return processSelected;
}




for(int i=0; i< total[execution_time]; i++){
	foreach(processes as process){

		if(process['time_arrive'] <= i){
			if(process['exec_time']>0){
				if(process in execution){
					process['exec_time']=process['exec_time']-1;
				}else{
					process['waiting_time']=process['waiting_time']+1;
				}
			}
			
		}
		
	}
}


























5:0:3		14
4:1:2		6
3:1:1		0
4:2:2		10
3:3:1		3


//Priority
3:1:1    	0-2		0						10:31 - 32  -33  -34
3:3:1		3-6		1								   10:33	 -35  -36  -37
4:1:2		7-11	6					    10:31		    			      -38 -39 -40 -41
4:2:2		12-16	9							  10:32										  -42 - 43 -44- 45	
5:0:3		17-22	14				10:30 -31																	-46-47-48-49


tab exec_time= 		5  4  3  4  3		3 3 4 4 5
tab time_arrive =	0  1  1  2  3		1 3 1 2 0
tab priority=		3  2  1  2  1		1 1 2 2 3

tab Processes 		p1 p2 p3 p4 p5
tab waiting time    0  0  0	 0  0

time=0
for(int i=0; i< total[execution_time]; i++){
	foreach(processes as process){

		if(process['time_arrive'] <= i){
			if(process['exec_time']>0){
				if(process in execution){
					process['exec_time']=process['exec_time']-1;
				}else{
					process['waiting_time']=process['waiting_time']+1;
				}
			}
			
		}
		
	}
}



if (p1 in execution)
	

TET = 19

